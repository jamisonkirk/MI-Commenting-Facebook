// $Header: svn+ssh://srcctl.devel.nandomedia.com/nm/devel/subversion/support/js-libs/tags/js-libs_1.3/MI_Commenting_Facebook/js/MI_Commenting_Facebook.js 38 2013-11-21 19:29:34Z jwhetzel $
/** MI_Commenting.js ***************************************************************
 * @fileOverview
 * A generic class for managing commenting functionality. This app should be
 * extended with an backend-specific extension.
 *
 * @minify true
 * @author Jamison Kirk (jkirk [at] mcclatchyinteractive.com)
 */ 

/**
 * Commenting App extension for Facebook. This extension requires instantiation
 * of the base MI_Commenting app.
 *
 * <p>All that is required to implement commenting on a page is:</p>
 * <ol>
 *   <li>A target div, default is to look for a div with an id of "commentingStage",</li>
 *   <li>Instantiate the commenting app, and</li>
 *   <li>Call the commenting app's display method.</li>
 * </ol>
 * <pre><div id='commentingStage'></div>
<script>
	mi.commenting = new mi.Commenting();
	mi.commenting.display();
</script></pre>
 *
 * <h3>Configuration options</h3>
 * <dl>
 *   <dt>accountName</dt>
 *   <dd>Name used by the backend to identify the site, default is derived from 
 *     the domain.</dd>
 *   <dt>fbapp_id</dt>
 *   <dd>A multi-digit id number generated by Facebook. This number is acquired
 *   	by creating an app.</dd>
 *   <dt>enabled</dt>
 *   <dd>Integer value to enable/disable commenting, default is enabled.<br>
 *     0 = fully disabled<br>
 *     1 = fully enabled<br>
 *     2 = disable comment submission & display<br>
 *     3 = enable comment submission & display only<br>
 *     4 = disable popular threads widget<br>
 *   </dd>
 *   <dt>target</dt>
 *   <dd>Id value of the target element on the page in which the commenting 
 *     features are inserted, default is "commentingStage".</dd>
 * </dl>
 * @addon
 */

mi.Commenting.prototype.extended = true;

/** Displays the Facebook commenting on the page by executing the private variables
 * @private
 * @returns {Boolean}
 */
mi.Commenting.prototype._displayCommentingFacebook = function () {
	if ( this._createFBRoot() &&
	this._createFBTarget() &&
	this._createAsyncCall() ) {
		return true;
	}
	else {
		console.error("One or more methods failed to implement Facebook Commenting. Facebook Commenting has been disabled.");
		return false;
	}
};

/** a non-vendor-specific method name is used so that vendors can be changed
 *  vendor-specific names used in extensions so that multiple vendors can be present
 */
mi.Commenting.prototype._renderCommenting = mi.Commenting.prototype._displayCommentingFacebook;

/** Creates an asyncronous call to Facebook in the head
 * @private
 * @returns {Object}
 */
mi.Commenting.prototype._createAsyncCall = function () {
	var first_script = document.getElementsByTagName("script")[0];
	
	js = document.createElement("script");
	js.id = "facebook-jssdk";
	var fbapp_id = this.getConf("fbapp_id");
	if ( fbapp_id ) {
		js.src = "http://connect.facebook.net/en_US/all.js#xfbml=1&appId=" + fbapp_id;
	}
	else {
		this.setConf("enabled", 0);
		console.error("Facebook Commenting has been disabled due to an unconfigured fbapp_id.");
		return false;
	}
	js.type = "text/javascript";
	if (first_script) {
		first_script.parentNode.insertBefore(js, first_script);
	}
	else {
		var head = document.getElementByTagName("head");
		head.appendChild(js);
	}
	// return the created element if it exists, otherwise null
	return document.getElementById("facebook-jssdk");
};

/** Creates the fb-root div element at the top document.body
 * @private
 * @returns {Object}
 */
mi.Commenting.prototype._createFBRoot = function () {
	var fb_root = document.createElement("div");
	
	fb_root.id = "fb-root";
	$("body").prepend(fb_root);
	// return the created element if it exists, otherwise null
	return document.getElementById("fb-root");
};

/** Creates the Facebook target container within the common MI commentingStage div container
 * @private
 * @returns {Object}
 */
mi.Commenting.prototype._createFBTarget = function() {
	var href = "http://" + window.location.host + window.location.pathname;
	var fb_target = document.createElement("div");
	/** target configuration defaults to "commentingStage" by MI_Commenting base
	 */ 
	var target = document.getElementById( this.getConf("target"));
	var fb_target_attr =  mi.commenting.getConf("fb_comment_div");

	fb_target.className = "fb-comments";
	fb_target.id = "fb-comments";
	fb_target.setAttribute("data-href", href);
	
	//Sets "data-width" attribute to default of 620 unless it's been specified in the Commenting Config
	( fb_target_attr && fb_target_attr["data-width"] ) ? fb_target.setAttribute( "data-width" , fb_target_attr["data-width"] ) : fb_target.setAttribute( "data-width", "620" );
	
	//Sets "data-num-posts" attribute to default of 620 unless it's been specified in the Commenting Config
	( fb_target_attr && fb_target_attr["data-num-posts"] ) ? fb_target.setAttribute( "data-num-posts" , fb_target_attr["data-num-posts"] ) : fb_target.setAttribute( "data-num-posts", "10" );
	
	//Sets "data-colorscheme" attribute as specified in the Commenting Config, otherwise does nothing. Default is "light" but does not to be listed as an attribute.
	if ( fb_target_attr && fb_target_attr["data-colorscheme"] == "dark" ) {
		fb_target.setAttribute( "data-colorscheme" , fb_target_attr["data-colorscheme"]);
	}

	target.appendChild( fb_target );
	// return the created element if it exists, otherwise null
	return document.getElementById("fb-comments");
};

/** Displays the Comment Count by creating an iframe within the common 
 * MI commentingStage div container above the FBTarget container
 * 
 * @returns {Boolean}
 */
mi.Commenting.prototype._displayCommentCountFacebook = function () {
	var href = "http://" + window.location.host + window.location.pathname;
	var cc_config = mi.commenting.getConf("cc_iframe");
	var cc_iframe = document.createElement("iframe");
	var fb_comments = jQuery(".fb-comments")[0];
	cc_iframe.src = "http://www.facebook.com/plugins/comments.php?href=" + href + "&permalink=1";
	cc_iframe.scrolling = "no";
	cc_iframe.setAttribute("frameBorder", "0");
	cc_iframe.style.overflow = "hidden";
	( cc_config && cc_config.width ) ? cc_iframe.width = cc_config.width : cc_iframe.width = "130";
	( cc_config && cc_config.height ) ? cc_iframe.height= cc_config.height: cc_iframe.height = "16";
	
	if (fb_comments) {
		fb_comments.parentNode.insertBefore(cc_iframe, fb_comments);
		return true;
	}
	else {
		return false;
	}
};

mi.Commenting.prototype._displayCommentCount = mi.Commenting.prototype._displayCommentCountFacebook;